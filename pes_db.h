/*
 * This file has been automatically generated by the WICED Smart Designer.
 * Definitions for constants used in the device's GATT database and function
 * prototypes.
 *
 */

// pes_db.h

#ifndef __GATT_DATABASE_H__
#define __GATT_DATABASE_H__

// UART is enabled in device settings
#define GATT_DB_ENABLE_UART

#define UUID_SERVICE_GAP                                      0x1800
#define UUID_CHARACTERISTIC_DEVICE_NAME                       0x2A00
#define UUID_CHARACTERISTIC_APPEARANCE                        0x2A01
#define UUID_SERVICE_GATT                                     0x1801
#define __UUID_SENSOR_SERVICE                                 0x3D8E
#define __UUID_SENSOR_SERVICE_TEMPERATURE                     0x2A6E
#define __UUID_SENSOR_SERVICE_HUMIDITY                        0x2BCD
#define UUID_SERVICE_BATTERY                                  0x180F
#define UUID_CHARACTERISTIC_BATTERY_LEVEL                     0x2A19

// ***** Primary Service 'Generic Access'
#define HDLS_GENERIC_ACCESS                                   0x0001
// ----- Characteristic 'Device Name'
#define HDLC_GENERIC_ACCESS_DEVICE_NAME                       0x0002
#define HDLC_GENERIC_ACCESS_DEVICE_NAME_VALUE                 0x0003
// ----- Characteristic 'Appearance'
#define HDLC_GENERIC_ACCESS_APPEARANCE                        0x0004
#define HDLC_GENERIC_ACCESS_APPEARANCE_VALUE                  0x0005

// ***** Primary Service 'Generic Attribute'
#define HDLS_GENERIC_ATTRIBUTE                                0x0006

// ***** Primary Service 'Sensor Service'
#define HDLS_SENSOR_SERVICE                                   0x0100
// ----- Characteristic 'Temperature'
#define HDLC_SENSOR_SERVICE_TEMPERATURE                       0x0101
#define HDLC_SENSOR_SERVICE_TEMPERATURE_VALUE                 0x0102
// ===== Descriptor 'Client Configuration'
#define HDLD_SENSOR_SERVICE_TEMPERATURE_CLIENT_CONFIGURATION  0x0103
// ===== Descriptor 'Presentation Format'
#define HDLD_SENSOR_SERVICE_TEMPERATURE_PRESENTATION_FORMAT_0 0x0104
// ----- Characteristic 'Humidity'
#define HDLC_SENSOR_SERVICE_HUMIDITY                          0x0105
#define HDLC_SENSOR_SERVICE_HUMIDITY_VALUE                    0x0106
// ===== Descriptor 'Client Configuration'
#define HDLD_SENSOR_SERVICE_HUMIDITY_CLIENT_CONFIGURATION     0x0107
// ===== Descriptor 'Presentation Format'
#define HDLD_SENSOR_SERVICE_HUMIDITY_PRESENTATION_FORMAT_0    0x0108

// ***** Primary Service 'Battery Service'
#define HDLS_BATTERY_SERVICE                                  0x0200
// ----- Characteristic 'Battery Level'
#define HDLC_BATTERY_SERVICE_BATTERY_LEVEL                    0x0201
#define HDLC_BATTERY_SERVICE_BATTERY_LEVEL_VALUE              0x0202

#pragma pack(1)
// Host information for NVRAM
typedef PACKED struct
{
    // BD address of the bonded host
    BD_ADDR  bdaddr;

    // Current value of the client configuration descriptor for characteristic 'Temperature'
    UINT16 sensor_service_temperature_client_configuration;

    // Current value of the client configuration descriptor for characteristic 'Humidity'
    UINT16 sensor_service_humidity_client_configuration;
}  __HOSTINFO;
#pragma pack()

// External definitions
extern const UINT8  gatt_database[];
extern const UINT16 gatt_database_len;
extern UINT8        pes_indication_sent;           // 1 means waiting for ack
extern UINT16       pes_connection_handle;         // HCI handle of connection, not zero when connected
extern const BLE_PROFILE_GPIO_CFG
                    pes_gpio_cfg;                  // Defines GPIO configuration used by the application
extern BD_ADDR      pes_remote_addr;               // Address of currently connected client
extern UINT8        pes_uuid_main_service[2];      // Main service
// Pointer to the generated part of hostinfo
extern __HOSTINFO   *p_hostinfo_generated;

// Functions definitions

// Will be called on indication confirmation
extern void pes_indication_cfm();
// Registers timer. Should be called from pes_create()
extern void pes_reg_timer();
// Initializes persistent values in the hostinfo to add bonded peer
extern void pes_add_bond(UINT8 *bda);
// Prepares generated code for connection - writes persistent values from __HOSTINFO to GATT DB
extern void __on_connection_up();
// Sends notifications or/and indications for every client configuration descriptor
// Updates __HOSTINFO by the value written by peer.
// Returns true if any persistent value is changed
extern BOOL __write_handler(UINT16 handle, int len, UINT8 *attrPtr);


// ------------------- You have to implement these functions ----------------

// Custom function to be called every 1 s
extern void pes_timer_1s();


// ------------------- You can call these functions ----------------

// It should be called when 'Device Name' is changed
extern BOOL store_in_db_generic_access_device_name(UINT8* p_value, UINT8 value_len);

// It should be called when 'Appearance' is changed
extern BOOL store_in_db_generic_access_appearance(UINT8* p_value, UINT8 value_len);

// It should be called when 'Temperature' is changed
extern BOOL store_in_db_sensor_service_temperature(UINT8* p_value, UINT8 value_len, BOOL write, BOOL notify);

// It should be called when 'Humidity' is changed
extern BOOL store_in_db_sensor_service_humidity(UINT8* p_value, UINT8 value_len, BOOL write, BOOL notify);

// It should be called when 'Battery Level' is changed
extern BOOL store_in_db_battery_service_battery_level(UINT8* p_value, UINT8 value_len);

#endif /* __GATT_DATABASE_H__ */
